% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/landscape.R
\name{landscape}
\alias{landscape}
\alias{stat_landscape}
\alias{stat_frontier}
\title{Persistent landscapes}
\usage{
stat_landscape(mapping = NULL, data = NULL, geom = "segment",
  position = "identity", na.rm = FALSE, show.legend = NA,
  inherit.aes = TRUE, ...)

stat_frontier(mapping = NULL, data = NULL, geom = "line",
  position = "identity", na.rm = FALSE, show.legend = NA,
  inherit.aes = TRUE, ...)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[=aes]{aes()}} or
\code{\link[=aes_]{aes_()}}. If specified and \code{inherit.aes = TRUE} (the
default), it is combined with the default mapping at the top level of the
plot. You must supply \code{mapping} if there is no plot mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[=ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[=fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data.}

\item{geom}{The geometric object to use display the data; defaults to
\code{segment} in \code{geom_vietoris1()} and to \code{polygon} in \code{geom_vietoris2}. Pass
a string to override the default.}

\item{position}{Position adjustment, either as a string, or the result of
a call to a position adjustment function.}

\item{na.rm}{Logical; ignored.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[=borders]{borders()}}.}

\item{...}{Additional arguments passed to \code{\link[ggplot2:layer]{ggplot2::layer()}}.}
}
\description{
Visualize persistence data in a persistence landscape.
}
\details{
\emph{Persistence landscapes} can be understood as rotated diagonal \href{persist}{persistence diagrams}.
}
\section{Persistence data}{


\emph{Persistence data} encode the values of an underlying parameter
\eqn{\epsilon} at which topological features appear ("birth") and disappear
("death"). The difference between the birth and the death of a feature is
called its \emph{persistence}. Whereas topological features may be of different
dimensions, persistence data sets usually also include the dimension of
each feature.

\strong{ggtda} expects persistence data to have at least three columns: birth,
death, and dimension.
}

\section{Persistence landscapes}{


Persistence landscapes, anticipated by some alternative coordinatizations
of persistence diagrams, were proposed as Lipschitz functions that
demarcate the Pareto frontiers of persistence diagrams. They can be
averaged over the diagrams obtained from multiple data sets designed or
hypothesized to have been generated from the same underlying topological
structure.
}

\examples{
# toy example
toy.data <- data.frame(
  birth = c(0, 0, 1, 2, 1.5),
  death = c(5, 3, 5, 3, 6),
  dim = c("0", "0", "2", "1", "1")
)

# compare the plots below to their analogues using `geom_persist()`

# persistence landscape for each dimension
ggplot(toy.data, aes(start = birth, end = death)) +
  coord_fixed() +
  facet_wrap(~ dim) +
  stat_landscape()

# combined persistence frontier
ggplot(toy.data, aes(start = birth, end = death)) +
  coord_fixed() +
  stat_frontier()

# grouped persistence frontier
ggplot(toy.data, aes(start = birth, end = death, color = dim)) +
  coord_fixed() +
  stat_frontier()

# overlay landscape with frontier
ggplot(toy.data, aes(start = birth, end = death, color = dim)) +
  coord_fixed() +
  stat_landscape(linetype = "dashed") +
  stat_frontier()

# SUGGESTION:
# `stat_persistence()` & `stat_frontier()`
# w/ `type = "diagonal"/"flat"/"landscape"`
# either defaulting to `geom_point/segment()`
}
\references{
H Edelsbrunner and D Morozov (2012) Persistent Homology: Theory and Practice.
\emph{European Congress of Mathematics}, 31--50. \doi{10.4171/120}

P Bubenik (2015) Statistical Topological Data Analysis using Persistence
Landscapes. \emph{Journal of Machine Learning Research}, \strong{16} 77--102.
\url{http://jmlr.org/papers/v16/bubenik15a.html}
}
\seealso{
\code{\link[ggplot2:layer]{ggplot2::layer()}} for additional arguments.

Other plot layers for persistence data: \code{\link{barcode}},
  \code{\link{persist}}
}
\concept{plot layers for persistence data}
